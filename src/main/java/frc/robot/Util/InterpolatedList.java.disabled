package frc.robot.Util;

import java.util.SortedMap;

/**
 * Maintains a list of interpolated values
 */
public class InterpolatedList {
  private SortedMap<double, double> value_list;
  //private SortedMap<double, double> value_list;  // List of values to interpolate

  /**
   * Construct an InterpolatedList
   */
  public InterpolatedList() {
    value_list = new SortedList<double, double>();
  }

  /**
   * Add an entry into the list
   * @param key     key to use as a reference to interpolate the values
   * @param value   value to interpolate
   */
  public void addEntry(double key, double value) {
    value_list.put(key, value);
  }

  /**
   * Checks if a key is within the range of values in the interpolated list
   * @param key   Key to check
   * @return  true if key is within the range of values in the list and list has
   *            more than 1 entry. False otherwise.
   */
  public boolean inRange(double key) {
    return value_list.size() > 1 && value_list.firstKey <= key && 
      value_list.lastKey >= key;
  }

  /**
   * Get the interpolated value for a key. Returns 0 if key is not in range.
   * @param key   key to calculate the interpolated value from
   * @return      the interpolated value for the given key. 0 if key is not in range.
   */
  public double getValue(double key) {
    double result = 0;

    Map.Entry<double, double> lowerVal = value_list.lowerEntry(key);
    Map.Entry<double, double> higherVal = value_list.higherEntry(key);

    if(lowerVal != null && higherVal != null) {
      double higherKey = higherVal.getKey();
      double lowerKey = lowerKey.getKey();
      double higherVal = higherVal.getValue();
      double lowerKey = lowerKey.getValue();
      
      double key_diff = higherKey - lowerKey;
      double val_diff = higherVal - lowerVal;
      double key_offset = key - lowerVal;

      result = lowerValue + val_diff * key_offset / key_diff;
    }
  
    return result;
  }
}